//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TFlex.DOCs.References.EtalonMaterial
{
	using System;
	using TFlex.DOCs.Model.References;
	using TFlex.DOCs.Model.Structure;
	using TFlex.DOCs.Model.References.Links;
	using TFlex.DOCs.Model.Classes;
	using TFlex.DOCs.Model.Parameters;
	
	
	/// <summary>
	/// Представляет объект справочника "Эталонные материалы"
	/// </summary>
	public partial class EtalonMaterialReferenceObject
	{
		
		internal EtalonMaterialReferenceObject(EtalonMaterialReference reference) : 
				base(reference)
		{
		}
		
		/// <summary>
		/// Возвращает описание типа объекта
		/// </summary>
		public new EtalonMaterialType Class
		{
			get
			{
				return ((EtalonMaterialType)(base.Class));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Сводное наименование"
		/// </summary>
		public StringParameter Name
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.Name]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Код/Обозначение"
		/// </summary>
		public StringParameter Denotation
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.Denotation]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Назначение/Описание"
		/// </summary>
		public StringParameter Description
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.Description]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Вспомогательный материал"
		/// </summary>
		public BooleanParameter IsSupportMaterial
		{
			get
			{
				return ((BooleanParameter)(this[FieldKeys.IsSupportMaterial]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Покрытие"
		/// </summary>
		public BooleanParameter IsCovering
		{
			get
			{
				return ((BooleanParameter)(this[FieldKeys.IsCovering]));
			}
		}
		
		/// <summary>
		/// Возвращает или задаёт связанный объект справочника "Марки материалов" по связи "Марки материалов"
		/// </summary>
		public ReferenceObject MarkMaterisl
		{
			get
			{
				return GetObject(RelationKeys.MarkMaterisl);
			}
			set
			{
				SetLinkedObject(RelationKeys.MarkMaterisl, value);
			}
		}
		
		/// <summary>
		/// Возвращает или задаёт связанный объект справочника "Cортамент материалов" по связи "Сортамент"
		/// </summary>
		public ReferenceObject Sortament
		{
			get
			{
				return GetObject(RelationKeys.Sortament);
			}
			set
			{
				SetLinkedObject(RelationKeys.Sortament, value);
			}
		}
		
		/// <summary>
		/// Возвращает или задаёт связанный объект справочника "Рецептурный справочник" по связи "Рецептура"
		/// </summary>
		public ReferenceObject Recipe
		{
			get
			{
				return GetObject(RelationKeys.Recipe);
			}
			set
			{
				SetLinkedObject(RelationKeys.Recipe, value);
			}
		}
		
		/// <summary>
		/// Возвращает или задаёт связанный объект справочника "Технические условия на материалы" по связи "ТУ"
		/// </summary>
		public ReferenceObject TY
		{
			get
			{
				return GetObject(RelationKeys.TY);
			}
			set
			{
				SetLinkedObject(RelationKeys.TY, value);
			}
		}
		
		/// <summary>
		/// Возвращает или задаёт связанный объект справочника "Технические требования к материалам" по связи "Тех.требования"
		/// </summary>
		public ReferenceObject TechRequirement
		{
			get
			{
				return GetObject(RelationKeys.TechRequirement);
			}
			set
			{
				SetLinkedObject(RelationKeys.TechRequirement, value);
			}
		}
		
		/// <summary>
		/// Возвращает или задаёт связанный объект справочника "Номенклатура ERP" по связи "Номенклатура ERP М"
		/// </summary>
		public ReferenceObject Nomenclature
		{
			get
			{
				return GetObject(RelationKeys.Nomenclature);
			}
			set
			{
				SetLinkedObject(RelationKeys.Nomenclature, value);
			}
		}
		
		/// <summary>
		/// Возвращает связанные объекты справочника "Справочник эквивалентов MDM" по связи "Эквиваленты материала MDM"
		/// </summary>
		public ReferenceObjectCollection Equivalent
		{
			get
			{
				return Links.ToMany[RelationKeys.Equivalent].Objects;
			}
		}
		
		/// <summary>
		/// Подключает объект справочника "Справочник эквивалентов MDM" по связи "Эквиваленты материала MDM"
		/// </summary>
		/// <param name="newLinkedObject">
		/// Подключаемый объект
		/// </param>
		/// <returns>
		/// Подключённый объект
		/// </returns>
		public ReferenceObject AddEquivalent(ReferenceObject newLinkedObject)
		{
			return AddLinkedObject(RelationKeys.Equivalent, newLinkedObject);
		}
		
		/// <summary>
		/// Отключает объект справочника "Справочник эквивалентов MDM" по связи "Эквиваленты материала MDM"
		/// </summary>
		/// <param name="linkedObject">
		/// Связанный объект
		/// </param>
		/// <returns>
		/// true, если объект был отключен
		/// </returns>
		public Boolean RemoveEquivalent(ReferenceObject linkedObject)
		{
			return RemoveLinkedObject(RelationKeys.Equivalent, linkedObject);
		}
		
		/// <summary>
		/// Уникальные идентификаторы (GUID) параметров справочника "Эталонные материалы"
		/// </summary>
		public class FieldKeys
		{
			
			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Сводное наименование"
			/// </summary>
		   public static readonly Guid Name = new Guid("fc3192cd-4af5-4c7d-ade8-af22e45c9857");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Код/Обозначение"
			/// </summary>
		   public static readonly Guid Denotation = new Guid("005c9200-992e-449a-b348-6c65e930a2c9");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Назначение/Описание"
			/// </summary>
		   public static readonly Guid Description = new Guid("09f8998e-379c-462f-9c6e-0d3e9f176d8c");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Вспомогательный материал"
			/// </summary>
		   public static readonly Guid IsSupportMaterial = new Guid("8b0cc24b-3b68-48af-a71c-f394c74bc2a4");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Покрытие"
			/// </summary>
		   public static readonly Guid IsCovering = new Guid("cce61225-2d69-432d-90be-9de3b0a5701c");

		}
		
		/// <summary>
		/// Уникальные идентификаторы (GUID) связей и списков объектов справочника "Эталонные материалы"
		/// </summary>
		public class RelationKeys
		{
			
			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "Марки материалов"
			/// </summary>
		   public static readonly Guid MarkMaterisl = new Guid("45d0f929-2953-4849-be11-8f00556a499e");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "Сортамент"
			/// </summary>
		   public static readonly Guid Sortament = new Guid("ccbb15a7-1c22-48b6-820a-79f5e17d626d");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "Рецептура"
			/// </summary>
		   public static readonly Guid Recipe = new Guid("23a86b63-6358-4262-a255-b9797718e420");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "ТУ"
			/// </summary>
		   public static readonly Guid TY = new Guid("c434b0ca-c9e2-49ac-a622-b4eade5336c5");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "Тех.требования"
			/// </summary>
		   public static readonly Guid TechRequirement = new Guid("3b9134e4-1064-4e00-8a87-b9e2a4975c09");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "Номенклатура ERP М"
			/// </summary>
		   public static readonly Guid Nomenclature = new Guid("b90e41e3-2160-4f7e-ae86-4c55345306fc");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "Эквиваленты материала MDM"
			/// </summary>
		   public static readonly Guid Equivalent = new Guid("51f9d4cf-11a4-416a-a625-023497a7b097");

		}
	}
}
