//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TFlex.DOCs.References.EtalonProduct
{
	using System;
	using TFlex.DOCs.Model.References;
	using TFlex.DOCs.Model.Structure;
	using TFlex.DOCs.Model.References.Links;
	using TFlex.DOCs.Model.Classes;
	using TFlex.DOCs.Model.Parameters;
	
	
	/// <summary>
	/// Представляет объект справочника "Эталонные изделия"
	/// </summary>
	public partial class EtalonProductReferenceObject
	{
		
		internal EtalonProductReferenceObject(EtalonProductReference reference) : 
				base(reference)
		{
		}
		
		/// <summary>
		/// Возвращает описание типа объекта
		/// </summary>
		public new EtalonProductType Class
		{
			get
			{
				return ((EtalonProductType)(base.Class));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Наименование"
		/// </summary>
		public StringParameter Name
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.Name]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Обозначение"
		/// </summary>
		public StringParameter Denotation
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.Denotation]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Код ФНН"
		/// </summary>
		public StringParameter KodFnn
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.KodFnn]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Покупное"
		/// </summary>
		public BooleanParameter IsBuying
		{
			get
			{
				return ((BooleanParameter)(this[FieldKeys.IsBuying]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Масса"
		/// </summary>
		public DoubleParameter Weight
		{
			get
			{
				return ((DoubleParameter)(this[FieldKeys.Weight]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Конечное изделие"
		/// </summary>
		public BooleanParameter IsFinalProduct
		{
			get
			{
				return ((BooleanParameter)(this[FieldKeys.IsFinalProduct]));
			}
		}
		
		/// <summary>
		/// Возвращает или задаёт связанный объект справочника "Номенклатура ERP" по связи "Номенклатура ERP И"
		/// </summary>
		public ReferenceObject Nomenclature
		{
			get
			{
				return GetObject(RelationKeys.Nomenclature);
			}
			set
			{
				SetLinkedObject(RelationKeys.Nomenclature, value);
			}
		}
		
		/// <summary>
		/// Возвращает связанные объекты справочника "Справочник эквивалентов MDM" по связи "Эквивалент изделия MDM"
		/// </summary>
		public ReferenceObjectCollection Equivalent
		{
			get
			{
				return Links.ToMany[RelationKeys.Equivalent].Objects;
			}
		}
		
		/// <summary>
		/// Возвращает или задаёт связанный объект справочника "Электронная структура изделий" по связи "ЭСИ изделие"
		/// </summary>
		public ReferenceObject Product
		{
			get
			{
				return GetObject(RelationKeys.Product);
			}
			set
			{
				SetLinkedObject(RelationKeys.Product, value);
			}
		}
		
		/// <summary>
		/// Подключает объект справочника "Справочник эквивалентов MDM" по связи "Эквивалент изделия MDM"
		/// </summary>
		/// <param name="newLinkedObject">
		/// Подключаемый объект
		/// </param>
		/// <returns>
		/// Подключённый объект
		/// </returns>
		public ReferenceObject AddEquivalent(ReferenceObject newLinkedObject)
		{
			return AddLinkedObject(RelationKeys.Equivalent, newLinkedObject);
		}
		
		/// <summary>
		/// Отключает объект справочника "Справочник эквивалентов MDM" по связи "Эквивалент изделия MDM"
		/// </summary>
		/// <param name="linkedObject">
		/// Связанный объект
		/// </param>
		/// <returns>
		/// true, если объект был отключен
		/// </returns>
		public Boolean RemoveEquivalent(ReferenceObject linkedObject)
		{
			return RemoveLinkedObject(RelationKeys.Equivalent, linkedObject);
		}
		
		/// <summary>
		/// Уникальные идентификаторы (GUID) параметров справочника "Эталонные изделия"
		/// </summary>
		public class FieldKeys
		{
			
			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Наименование"
			/// </summary>
		   public static readonly Guid Name = new Guid("1f871942-83ee-4cb2-98cd-9f2695d6a440");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Обозначение"
			/// </summary>
		   public static readonly Guid Denotation = new Guid("6100355a-4110-43d2-accf-f85975209d8b");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Код ФНН"
			/// </summary>
		   public static readonly Guid KodFnn = new Guid("cbe025e3-1f61-4c65-b11f-7349f567c98d");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Покупное"
			/// </summary>
		   public static readonly Guid IsBuying = new Guid("c8b5402d-bfa3-4f08-8681-14ce6a642022");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Масса"
			/// </summary>
		   public static readonly Guid Weight = new Guid("7cef0023-94ff-4925-bbcf-ce2a0ab788e0");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Конечное изделие"
			/// </summary>
		   public static readonly Guid IsFinalProduct = new Guid("b757c5df-bff5-4181-905f-b49a71b0d1ad");

		}
		
		/// <summary>
		/// Уникальные идентификаторы (GUID) связей и списков объектов справочника "Эталонные изделия"
		/// </summary>
		public class RelationKeys
		{
			
			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "Номенклатура ERP И"
			/// </summary>
		   public static readonly Guid Nomenclature = new Guid("730906d9-055c-483e-824f-d9ad6856d1db");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "Эквивалент изделия MDM"
			/// </summary>
		   public static readonly Guid Equivalent = new Guid("2583e1ee-8e50-43c3-a975-5ffcf9482202");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "ЭСИ изделие"
			/// </summary>
		   public static readonly Guid Product = new Guid("b26ad6ea-d381-48db-806e-8a8e0343c5ee");

		}
	}
}
