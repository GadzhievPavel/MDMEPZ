//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TFlex.DOCs.References.StandartProduct
{
	using System;
	using TFlex.DOCs.Model.References;
	using TFlex.DOCs.Model.Structure;
	using TFlex.DOCs.Model.References.Links;
	using TFlex.DOCs.Model.Classes;
	using TFlex.DOCs.Model.Parameters;
	
	
	/// <summary>
	/// Представляет объект справочника "Эталонные стандартные изделия"
	/// </summary>
	public partial class StandartProductReferenceObject
	{
		
		internal StandartProductReferenceObject(StandartProductReference reference) : 
				base(reference)
		{
		}
		
		/// <summary>
		/// Возвращает описание типа объекта
		/// </summary>
		public new StandartProductType Class
		{
			get
			{
				return ((StandartProductType)(base.Class));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Наименование"
		/// </summary>
		public StringParameter Name
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.Name]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Обозначение"
		/// </summary>
		public StringParameter Denotation
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.Denotation]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Покупное"
		/// </summary>
		public BooleanParameter IsBuying
		{
			get
			{
				return ((BooleanParameter)(this[FieldKeys.IsBuying]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Тип стандартного изделия"
		/// </summary>
		public StringParameter TypeStandartProduct
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.TypeStandartProduct]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Конечное изделие"
		/// </summary>
		public BooleanParameter IsFinalProduct
		{
			get
			{
				return ((BooleanParameter)(this[FieldKeys.IsFinalProduct]));
			}
		}
		
		/// <summary>
		/// Возвращает или задаёт связанный объект справочника "Номенклатура ERP" по связи "Номенклатура ERP СИ"
		/// </summary>
		public ReferenceObject Nomenclature
		{
			get
			{
				return GetObject(RelationKeys.Nomenclature);
			}
			set
			{
				SetLinkedObject(RelationKeys.Nomenclature, value);
			}
		}
		
		/// <summary>
		/// Возвращает связанные объекты справочника "Справочник эквивалентов MDM" по связи "Экиваленты стандартных изделий MDM"
		/// </summary>
		public ReferenceObjectCollection Equivalent
		{
			get
			{
				return Links.ToMany[RelationKeys.Equivalent].Objects;
			}
		}
		
		/// <summary>
		/// Подключает объект справочника "Справочник эквивалентов MDM" по связи "Экиваленты стандартных изделий MDM"
		/// </summary>
		/// <param name="newLinkedObject">
		/// Подключаемый объект
		/// </param>
		/// <returns>
		/// Подключённый объект
		/// </returns>
		public ReferenceObject AddEquivalent(ReferenceObject newLinkedObject)
		{
			return AddLinkedObject(RelationKeys.Equivalent, newLinkedObject);
		}
		
		/// <summary>
		/// Отключает объект справочника "Справочник эквивалентов MDM" по связи "Экиваленты стандартных изделий MDM"
		/// </summary>
		/// <param name="linkedObject">
		/// Связанный объект
		/// </param>
		/// <returns>
		/// true, если объект был отключен
		/// </returns>
		public Boolean RemoveEquivalent(ReferenceObject linkedObject)
		{
			return RemoveLinkedObject(RelationKeys.Equivalent, linkedObject);
		}
		
		/// <summary>
		/// Уникальные идентификаторы (GUID) параметров справочника "Эталонные стандартные изделия"
		/// </summary>
		public class FieldKeys
		{
			
			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Наименование"
			/// </summary>
		   public static readonly Guid Name = new Guid("49d77e32-f101-4c9a-8250-7f1f6670fc6f");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Обозначение"
			/// </summary>
		   public static readonly Guid Denotation = new Guid("6f3d22ce-404b-4b5d-9889-053b3c7434ba");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Покупное"
			/// </summary>
		   public static readonly Guid IsBuying = new Guid("132bbd08-ce5c-4de3-8885-d27f5bcae935");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Тип стандартного изделия"
			/// </summary>
		   public static readonly Guid TypeStandartProduct = new Guid("a4940d94-1d83-416c-92fb-2ff9421a18e1");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) параметра "Конечное изделие"
			/// </summary>
		   public static readonly Guid IsFinalProduct = new Guid("10a660af-b256-4f64-8e10-d334b360d546");

		}
		
		/// <summary>
		/// Уникальные идентификаторы (GUID) связей и списков объектов справочника "Эталонные стандартные изделия"
		/// </summary>
		public class RelationKeys
		{
			
			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "Номенклатура ERP СИ"
			/// </summary>
		   public static readonly Guid Nomenclature = new Guid("917c19a0-6267-4ade-a87c-a4980ec54542");

			/// <summary>
			/// Представляет уникальный идентификатор (GUID) связи "Экиваленты стандартных изделий MDM"
			/// </summary>
		   public static readonly Guid Equivalent = new Guid("17dfef57-0b12-469a-9580-2e9049467f65");

		}
	}
}
