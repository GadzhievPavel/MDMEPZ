//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TFlex.DOCs.References.NomenclatureMDM
{
	using System;
	using TFlex.DOCs.Model.References;
	using TFlex.DOCs.Model.Structure;
	using TFlex.DOCs.Model.References.Links;
	using TFlex.DOCs.Model.Classes;
	using TFlex.DOCs.Model.Parameters;
    using TFlex.DOCs.References.NomenclatureERP;


    /// <summary>
    /// Представляет объект "Номенклатура ИТРП" справочника "Номенклатура ERP" или порождённый от него
    /// </summary>
    public partial class NomenclatureITRPReferenceObject:NomenclatureMDMReferenceObject
	{
		
		internal NomenclatureITRPReferenceObject(NomenclatureMDMReference reference) : 
				base(reference)
		{
		}
		
		/// <summary>
		/// Возвращает параметр "Наименование"
		/// </summary>
		public StringParameter Name
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.Name]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Обозначение"
		/// </summary>
		public StringParameter Denotation
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.Denotation]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Вес"
		/// </summary>
		public DoubleParameter Weight
		{
			get
			{
				return ((DoubleParameter)(this[FieldKeys.Weight]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "GUID(1C)"
		/// </summary>
		public GuidParameter GUID1C
		{
			get
			{
				return ((GuidParameter)(this[FieldKeys.GUID1C]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "GUID(T-FLEX)"
		/// </summary>
		public GuidParameter GUIDTFLEX
        {
			get
			{
				return ((GuidParameter)(this[FieldKeys.GUIDTFLEX]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Типовое"
		/// </summary>
		public BooleanParameter IsTypical
        {
			get
			{
				return ((BooleanParameter)(this[FieldKeys.IsTypical]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "КодЕламед"
		/// </summary>
		public StringParameter CodeElamed
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.CodeElamed]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Актуальность записи"
		/// </summary>
		public BooleanParameter IsActual
		{
			get
			{
				return ((BooleanParameter)(this[FieldKeys.IsActual]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "НаименованиеДляВвода"
		/// </summary>
		public StringParameter NameForInput
        {
			get
			{
				return ((StringParameter)(this[FieldKeys.NameForInput]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "НаименованиеПолное"
		/// </summary>
		public StringParameter NameFull
        {
			get
			{
				return ((StringParameter)(this[FieldKeys.NameFull]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "ID53"
		/// </summary>
		public Int32Parameter ID53
		{
			get
			{
				return ((Int32Parameter)(this[FieldKeys.ID53]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Артикул"
		/// </summary>
		public StringParameter Articul
        {
			get
			{
				return ((StringParameter)(this[FieldKeys.Articul]));
			}
		}
		
		/// <summary>
		/// Возвращает параметр "Код"
		/// </summary>
		public StringParameter Code
		{
			get
			{
				return ((StringParameter)(this[FieldKeys.Code]));
			}
		}
	}
}
