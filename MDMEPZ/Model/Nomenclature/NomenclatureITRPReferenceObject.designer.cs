//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TFlex.DOCs.References.NomenclatureMDM
{
    using System;
    using TFlex.DOCs.Model.References;
    using TFlex.DOCs.Model.Structure;
    using TFlex.DOCs.Model.References.Links;
    using TFlex.DOCs.Model.Classes;
    using TFlex.DOCs.Model.Parameters;
    using TFlex.DOCs.References.NomenclatureERP;
    using MDMEPZ.Model.Nomenclature.UnitOfMeasurementITRP;
    using TFlex.DOCs.References.TypeTMC;
    using System.Collections.Generic;
    using System.Linq;


    /// <summary>
    /// Представляет объект "Номенклатура ИТРП" справочника "Номенклатура ERP" или порождённый от него
    /// </summary>
    public partial class NomenclatureITRPReferenceObject : NomenclatureMDMReferenceObject
    {

        internal NomenclatureITRPReferenceObject(NomenclatureMDMReference reference) :
                base(reference)
        {
        }

        /// <summary>
        /// Возвращает параметр "Наименование"
        /// </summary>
        public StringParameter Name
        {
            get
            {
                return ((StringParameter)(this[FieldKeys.Name]));
            }
        }

        /// <summary>
        /// Возвращает параметр "Обозначение"
        /// </summary>
        public StringParameter Denotation
        {
            get
            {
                return ((StringParameter)(this[FieldKeys.Denotation]));
            }
        }

        /// <summary>
        /// Возвращает параметр "Вес"
        /// </summary>
        public DoubleParameter Weight
        {
            get
            {
                return ((DoubleParameter)(this[FieldKeys.Weight]));
            }
        }

        /// <summary>
        /// Возвращает параметр "GUID(1C)"
        /// </summary>
        public GuidParameter GUID1C
        {
            get
            {
                return ((GuidParameter)(this[FieldKeys.GUID1C]));
            }
        }

        /// <summary>
        /// Возвращает параметр "GUID(T-FLEX)"
        /// </summary>
        public GuidParameter GUIDTFLEX
        {
            get
            {
                return ((GuidParameter)(this[FieldKeys.GUIDTFLEX]));
            }
        }

        /// <summary>
        /// Возвращает параметр "Типовое"
        /// </summary>
        public BooleanParameter IsTypical
        {
            get
            {
                return ((BooleanParameter)(this[FieldKeys.IsTypical]));
            }
        }

        /// <summary>
        /// Возвращает параметр "КодЕламед"
        /// </summary>
        public StringParameter CodeElamed
        {
            get
            {
                return ((StringParameter)(this[FieldKeys.CodeElamed]));
            }
        }

        /// <summary>
        /// Возвращает параметр "Актуальность записи"
        /// </summary>
        public BooleanParameter IsActual
        {
            get
            {
                return ((BooleanParameter)(this[FieldKeys.IsActual]));
            }
        }

        /// <summary>
        /// Возвращает параметр "НаименованиеДляВвода"
        /// </summary>
        public StringParameter NameForInput
        {
            get
            {
                return ((StringParameter)(this[FieldKeys.NameForInput]));
            }
        }

        /// <summary>
        /// Возвращает параметр "НаименованиеПолное"
        /// </summary>
        public StringParameter NameFull
        {
            get
            {
                return ((StringParameter)(this[FieldKeys.NameFull]));
            }
        }

        /// <summary>
        /// Возвращает параметр "ID53"
        /// </summary>
        public Int32Parameter ID53
        {
            get
            {
                return ((Int32Parameter)(this[FieldKeys.ID53]));
            }
        }

        /// <summary>
        /// Возвращает параметр "Артикул"
        /// </summary>
        public StringParameter Articul
        {
            get
            {
                return ((StringParameter)(this[FieldKeys.Articul]));
            }
        }

        /// <summary>
        /// Возвращает параметр "Код"
        /// </summary>
        public StringParameter Code
        {
            get
            {
                return ((StringParameter)(this[FieldKeys.Code]));
            }
        }

        public TypeTMCReferenceObject TypeTMC
        {
            get
            {
                return GetObject(NomenclatureITRPReferenceObject.RelationKeys.TypeRecordTMC) as TypeTMCReferenceObject;
            }
            set
            {
                SetLinkedObject(NomenclatureITRPReferenceObject.RelationKeys.TypeRecordTMC, value);
            }
        }

        /// <summary>
        /// Создать объект списка Единицы измерения
        /// </summary>
        /// <returns></returns>
        public UnitOfMesurementITRPReferenceObject CreateUnitsOfMeasurement(Guid type)
        {
            var obj = this.CreateListObject(NomenclatureITRPReferenceObject.RelationKeys.UnitsOfMeasurementList, type);
            return new UnitOfMesurementITRPReferenceObject(obj);
        }

        /// <summary>
        /// Вернуть объекты списка Единицы измерения
        /// </summary>
        /// <returns></returns>
        public List<UnitOfMesurementITRPReferenceObject> GetUnitOfMesurementITRPReferenceObjects()
        {
            var listObj = this.GetObjects(NomenclatureITRPReferenceObject.RelationKeys.UnitsOfMeasurementList);
            var response = new List<UnitOfMesurementITRPReferenceObject>();
            foreach ( var obj in listObj )
            {
                response.Add(new UnitOfMesurementITRPReferenceObject(obj));
            }
            return response;
        }
        /// <summary>
        /// Создать объект списка Единицы
        /// </summary>
        /// <returns></returns>
        public UnitITRPReferenceObject CreateUnit()
        {
            var obj = this.CreateListObject(NomenclatureITRPReferenceObject.RelationKeys.UnitsList);
            return new UnitITRPReferenceObject(obj);
        }

        /// <summary>
        /// Вернуть объекты списка Единицы
        /// </summary>
        /// <returns></returns>
        public List<UnitITRPReferenceObject> GetUnits()
        {
            return this.GetObjects(NomenclatureITRPReferenceObject.RelationKeys.UnitsList).Cast<UnitITRPReferenceObject>().ToList();
        }

        public new string TypeReproduction
        {
            get { return this[NomenclatureITRPReferenceObject.FieldKeys.TypeReproduction].GetString(); }
            set { this[NomenclatureITRPReferenceObject.FieldKeys.TypeReproduction].Value = value; }
        }
        public static class TypesOfListUnitsOfMeasurement
        {
            /// <summary>
            /// тип списка Единицы Измерения Базовая единица измерения
            /// </summary>
            public static readonly Guid BaseUnitOfMeasurementClass = new Guid("0b20a3d6-787d-47ac-910e-fdb5a56f96ef");
            /// <summary>
            /// тип списка Единицы Измерения Единица хранения Остатков
            /// </summary>
            public static readonly Guid UnitOfMeasurementStorageRemainsClass = new Guid("cf145736-dfa6-4ead-86f5-6b3fcbed9549");
            /// <summary>
            /// тип списка Единицы Измерения Единица учета в производстве
            /// </summary>
            public static readonly Guid UnitOfMeasurementAccountInProduction = new Guid("f057f8f8-9e34-43e7-90af-cec53249f188");

        }

        public static class FieldKeysOfListUnitsOfMeasurement
        {
            /// <summary>
            /// гуид параметра UID единицы измерения из списка объектов Единицы Измерения
            /// </summary>
            public static readonly Guid UID = new Guid("c4857482-578f-4676-af34-97ee9899d555");
            /// <summary>
            /// гуид параметра Наименование единицы измерения из списка объектов Единицы Измерения
            /// </summary>
            public static readonly Guid Name = new Guid("b4d20392-a341-4267-a67a-9b6da34ca853");
        }

        public static class FieldKeysUnits
        {
            /// <summary>
            /// guid параметра наименование из списка объектов Единицы
            /// </summary>
            public static readonly Guid Name = new Guid("82efddd5-c39b-4b9a-95c5-d0b62ff4bd42");
            /// <summary>
            /// guid параметра Единица измерения код из списка объектов Единицы
            /// </summary>
            public static readonly Guid UnitOfMeasurementCode = new Guid("df09a3ba-021a-4c26-a1af-1065f3708a37");
            /// <summary>
            /// guid параметра Единица измерения коэффициент из списка объектов Единицы
            /// </summary>
            public static readonly Guid UnitOfMeasurementKoeff = new Guid("8413170b-4cc6-471a-a87b-d0e674667f75");
            /// <summary>
            /// guid параметра UID из списка объектов Единицы
            /// </summary>
            public static readonly Guid UID = new Guid("bee0ae90-788d-43fd-af9c-1d674fe34ba1");
        }
    }
}
